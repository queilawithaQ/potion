tree_size = (i):
  (1 << (i + 1)) - 1.

populate_tree = (node, depth):
  if (depth > 0):
    depth--
    node put("left", array(2))
    node put("right", array(2))
    populate_tree(node("left"), depth)
    populate_tree(node("right"), depth).
  .

new_tree = (depth):
  x = (left=nil, right=nil)
  if (depth > 0):
    x put("left", new_tree(depth - 1))
    x put("right", new_tree(depth - 1)).
  x.

"Stretching memory with a table of depth 20\n" print
temp = new_tree(20)
temp = 0

"Creating a long-lived table of depth 18\n" print
longlived = new_tree(18)

"Creating a long-lived array of 2000000 items\n" print
ary = array(2000000)

i = 4
while (i <= 20):
  iter = 2 * tree_size(20) / tree_size(i)
  ("Creating ", iter, " tables of depth ", i, "\n") join print

  j = 0
  while (j < iter):
    temp = (left=nil, right=nil)
    populate_tree(temp, i)
    temp = 0
    j++.

  j = 0
  while (j < iter):
    temp = new_tree(i)
    temp = 0
    j++.

  i = i + 2.

0
